install.package("jsonlite")
install.package("jsonlite")
install.packages("jsonlite")
students <- c(Abraham, Beatrice, Cory, Dinah, Eric, Felicia)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in students){
print(student)
}
}
roll_call(students)
locker_combinations <- function(class){
for (student in students){
print(sample(33,3))
print(student)
}
# Create the for loop and print the student name and locker combination.
}
locker_combinations(students)
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
letter <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (letter = "e"){
print(sample(33:66,3))
print(student)
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
letter <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (letter = e){
print(sample(33:66,3))
print(student)
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
letter <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (letter = e){
print(sample(33:66,3))
print(student)
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
letter <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (letter = "e"){
print(sample(33:66,3))
print(student)
}
}
security <- function(class){
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
letter <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (letter = "e"){
print(sample(33:66,3))
print(student)
}
}
}
security <- function(class){
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
letter <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (letter = "e"){
print(sample(33:66,3))
print(student)
}
}
}
security <- function(class){
for (student in class){
# Create a variable (substring)  that holds the second letter for each student.
letter <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (letter = "e"){
print(sample(33:66,3))
print(student)
}
}
}
locker_combinations <- function(class){
for (student in class){
print(sample(33,3))
print(student)
}
# Create the for loop and print the student name and locker combination.
}
locker_combinations(students)
security <- function(class){
for (student in class){
# Create a variable (substring)  that holds the second letter for each student.
letter <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (letter == "e"){
print(sample(33:66,3))
print(student)
}
}
}
security(students)
lm(qsec~mpg + disp + drat + wt + hp,data=mtcars)
summary(lm(qsec~mpg + disp + drat + wt + hp,data=mtcars))
summary(lm(qsec ~ hp, mtcars))
model <- lm(qsec ~ hp, mtcars)
View(model)
yvals <- model$coefficients['hp']*matcars$hp +
model$coefficients['(Intercept)']
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
plt <- ggplot(mtcars, aes(x=hp, y=qsec)) #import dataset into ggplot2
plt <- ggplot(mtcars, aes(x=hp, y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
library(tidyverse)
plt <- ggplot(mtcars, aes(x=hp, y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
?chisq.test()
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
library(dplyr)
library(tidyverse)
setwd("~/github/MechaCar_Statistics")
MechaCar_table <- read.csv(file = 'MechaCar_mpg.csv',check.names = F, stringsAsFactors = F)
View(MechaCar_table)
lm(mpg~vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = MechaCar_table)
MechaCar_lm = lm(mpg~vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = MechaCar_table)
summary(MechaCar_lm)
MechaCar_lm
summary(MechaCar_lm)
MechaCar_lm
summary(MechaCar_lm)
#deliverable 2: Create visualization for trip analysis
SuspensionC_table <- read.csv(file = 'Suspension_coil.csv',check.names = F, stringsAsFactors = F)
View(SuspensionC_table)
total_summary <- SuspensionC_table %>% summarize(Mean = mean(PSI), Median=median(PSI), Variance = variance(PSI),SD=sd(PSI),.groups = 'keep')
total_summary <- SuspensionC_table %>% summarize(Mean = mean(PSI), Median=median(PSI), Variance = var(PSI),SD=sd(PSI),.groups = 'keep')
View(total_summary)
lot_summary <- SuspensionC_table %>% group_by(PSI) %>% summarize(Mean = mean(PSI), Median=median(PSI), Variance = var(PSI),SD=sd(PSI),.groups = 'keep')
View(lot_summary)
lot_summary <- SuspensionC_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI), Median=median(PSI), Variance = var(PSI),SD=sd(PSI),.groups = 'keep')
View(lot_summary)
#deliverable 3 T-Test on Suspension Coils
?t.test()
#deliverable 3 T-Test on Suspension Coils
t.test(SuspensionC_table$PSI), mu=1500) #compare all lots against pupulation mean
#deliverable 3 T-Test on Suspension Coils
t.test(SuspensionC_table$PSI), mu==1500) #compare all lots against pupulation mean
#deliverable 3 T-Test on Suspension Coils
t.test(SuspensionC_table$PSI, mu=1500) #compare all lots against pupulation mean
Lot1_table <- subset(SuspensionC_table, Manufactoring_lot == "Lot1")
Lot1_table <- subset(SuspensionC_table, Manufacturing_lot == "Lot1")
Lot1_table <- subset(SuspensionC_table, Manufacturing_Lot == "Lot1")
View(Lot1_table)
Lot2_table <- subset(SuspensionC_table, Manufacturing_Lot == "Lot2")
Lot3_table <- subset(SuspensionC_table, Manufacturing_Lot == "Lot3")
View(Lot2_table)
View(Lot3_table)
t.test(Lot1_table$PSI, mu=1500)
t.test(Lot2_table$PSI, mu=1500)
t.test(Lot3_table$PSI, mu=1500)
